?shiny
shinyApp(ui, server)
#algo de un unico fichero o saparado, vamos a hacer el un solo fichero
library(shiny)
ui <- fluidPage(
titlePanel('Distribucion Muestral'),
sidebarLayout(
sliderInput( 'slidebar',
label = 'Tamaño Muestral',
min = 5,
max = 500,
value = 42),
selectInput(selectInput('distribucion', label="Distribución",
choices=list("Gaussiana"='norm',
"Uniforme"='unif',
"Poisson"='pois',
"Gamma"='gamma'),
selected = 'norm'
)
),
mainPanel(
plotOutput(outputId = "hist")
)
)
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$n))
})
}
shinyApp(ui, server)
#algo de un unico fichero o saparado, vamos a hacer el un solo fichero
library(shiny)
ui <- fluidPage(
titlePanel('Distribucion Muestral'),
sidebarLayout(
sliderInput( 'slidebar',
label = 'Tamaño Muestral',
min = 5,
max = 500,
value = 42),
selectInput(selectInput('distribucion', label="Distribución",
choices=list("Gaussiana"='norm',
"Uniforme"='unif',
"Poisson"='pois',
"Gamma"='gamma'),
selected = 'norm'
)
),
acctionButton('mostrar', label = 'Mostrar la distribucion'),
mainPanel(
plotOutput(outputId = "hist")
)
)
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$n))
})
}
shinyApp(ui, server)
#algo de un unico fichero o saparado, vamos a hacer el un solo fichero
library(shiny)
ui <- fluidPage(
titlePanel('Distribucion Muestral'),
sidebarLayout(
sliderInput( 'slidebar',
label = 'Tamaño Muestral',
min = 5,
max = 500,
value = 42),
selectInput(selectInput('distribucion', label="Distribución",
choices=list("Gaussiana"='norm',
"Uniforme"='unif',
"Poisson"='pois',
"Gamma"='gamma'),
selected = 'norm'
)
),
actionButton('mostrar', label = 'Mostrar la distribucion'),
mainPanel(
plotOutput(outputId = "hist")
)
)
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$n))
})
}
shinyApp(ui, server)
#algo de un unico fichero o saparado, vamos a hacer el un solo fichero
library(shiny)
ui <- fluidPage(
titlePanel('Distribucion Muestral'),
sidebarLayout(
sliderInput('slidebar',
label = 'Tamaño Muestral',
min = 5,
max = 500,
value = 42),
selectInput(selectInput('distribucion',
label = "Distribución",
choices = list("Gaussiana"='norm',
"Uniforme"='unif',
"Poisson"='pois',
"Gamma"='gamma'
),
selected = 'norm')),
actionButton('mostrar', label = 'Mostrar la distribucion'),
mainPanel(
plotOutput(outputId = "hist")
)
)
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$n))
})
}
shinyApp(ui, server)
runApp('isolate.R')
#algo de un unico fichero o saparado, vamos a hacer el un solo fichero
library(shiny)
ui <- fluidPage(
titlePanel('Distribucion Muestral'),
sidebarLayout(
sliderInput('slidebar',
label = 'Tamaño Muestral',
min = 5,
max = 500,
value = 42),
selectInput(selectInput('distribucion',
label = "Distribución",
choices = list("Gaussiana"='norm',
"Uniforme"='unif',
"Poisson"='pois',
"Gamma"='gamma'
),
),
selected = 'norm'),
actionButton('mostrar', label = 'Mostrar la distribucion'),
mainPanel(
plotOutput(outputId = "hist")
)
)
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$n))
})
}
shinyApp(ui, server)
#algo de un unico fichero o saparado, vamos a hacer el un solo fichero
library(shiny)
ui <- fluidPage(
titlePanel('Distribucion Muestral'),
sidebarLayout(
sliderInput('slidebar',
label = 'Tamaño Muestral',
min = 5,
max = 500,
value = 42),
selectInput(selectInput('distribucion',
label = "Distribución",
choices = list("Gaussiana"='norm',
"Uniforme"='unif',
"Poisson"='pois',
"Gamma"='gamma'
)
),
selected = 'norm'),
actionButton('mostrar', label = 'Mostrar la distribucion'),
mainPanel(
plotOutput(outputId = "hist")
)
)
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$n))
})
}
shinyApp(ui, server)
runApp('isolate.R')
#algo de un unico fichero o saparado, vamos a hacer el un solo fichero
library(shiny)
ui <- fluidPage(
titlePanel('Distribucion Muestral'),
sidebarLayout(
sliderInput('slidebar',
label = 'Tamaño Muestral',
min = 5,
max = 500,
value = 42),
selectInput(selectInput('distribucion',
label = "Distribución",
choices = list("Gaussiana"='norm',
"Uniforme"='unif',
"Poisson"='pois',
"Gamma"='gamma')
),
selected = 'norm'),
actionButton('mostrar', label = 'Mostrar la distribucion'),
mainPanel(
plotOutput(outputId = "hist")
)
)
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$n))
})
}
shinyApp(ui, server)
runApp('isolate.R')
#algo de un unico fichero o saparado, vamos a hacer el un solo fichero
library(shiny)
ui <- fluidPage(
titlePanel('Distribucion Muestral'),
sidebarLayout(
sliderInput('slidebar',
label = 'Tamaño Muestral',
min = 5,
max = 500,
value = 42),
selectInput(selectInput('distribucion',
label = "Distribución",
choices = list("Gaussiana"='norm',
"Uniforme"='unif',
"Poisson"='pois',
"Gamma"='gamma')
),
selected = 'norm'),
actionButton('mostrar', label = 'Mostrar la distribucion'),
mainPanel(
plotOutput(outputId = "hist")
)
)
)
server <- function(input, output) {
}
shinyApp(ui, server)
runApp('isolate.R')
runApp('isolate.R')
runApp('isolate.R')
runApp('isolate.R')
runApp('isolate.R')
#algo de un unico fichero o saparado, vamos a hacer el un solo fichero
library(shiny)
ui <- fluidPage(
titlePanel('Distribucion Muestral'),
sidebarLayout(
sliderInput('slidebar', label = 'Tamano Muestral',
min = 5, max = 500, value = 42),
selectInput(selectInput('distribucion',
label = "Distribucion",
choices = list("Gaussiana"='norm',
"Uniforme"='unif',
"Poisson"='pois',
"Gamma"='gamma')
),
selected = 'norm'),
actionButton('mostrar', label = 'Mostrar la distribucion')),
mainPanel(
plotOutput(outputId = "hist")
)
)
server <- function(input, output) {
}
shinyApp(ui, server)
runApp('isolate.R')
runApp('isolate.R')
runApp('isolate.R')
#algo de un unico fichero o saparado, vamos a hacer el un solo fichero
library(shiny)
ui <- fluidPage(
titlePanel('Distribucion Muestral'),
sidebarLayout(
sliderInput('slidebar', label = 'Tamano Muestral',
min = 5, max = 500, value = 42),
selectInput(selectInput('distribucion',
label = "Distribucion",
choices = list("Gaussiana" = 'norm',
"Uniforme" = 'unif',
"Poisson" = 'pois',
"Gamma" = 'gamma')
),
selected = 'norm'),
actionButton('mostrar', label = 'Mostrar la distribucion')
),
mainPanel(
plotOutput(outputId = "hist")
)
)
server <- function(input, output) {
output$hist <- renderPlot({
input$mostrar
rdistribucion <- switch (isolate(input$distribucion),
'norm' = rnorm,
'unif' = runif)
x <- rdistribucion(isolate(input$slidebar))
hist(x)
})
}
shinyApp(ui, server)
#algo de un unico fichero o saparado, vamos a hacer el un solo fichero
library(shiny)
ui <- fluidPage(
titlePanel('Distribucion Muestral'),
sidebarLayout(
sliderInput('slidebar', label = 'Tamano Muestral',
min = 5, max = 500, value = 42),
selectInput(selectInput('distribucion',
label = "Distribucion",
choices = list("Gaussiana" = 'norm',
"Uniforme" = 'unif',
"Poisson" = 'pois',
"Gamma" = 'gamma')
),
selected = 'norm'),
actionButton('mostrar', label = 'Mostrar la distribucion')
),
mainPanel(
plotOutput("hist")
)
)
server <- function(input, output) {
output$hist <- renderPlot({
input$mostrar
rdistribucion <- switch (isolate(input$distribucion),
'norm' = rnorm,
'unif' = runif)
x <- rdistribucion(isolate(input$slidebar))
hist(x)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel('Distribucion Muestral'),
sidebarLayout(
sliderInput('slidebar', label = 'Tamano Muestral',
min = 5, max = 500, value = 42),
selectInput(selectInput('distribucion',
label = "Distribucion",
choices = list("Gaussiana" = 'norm',
"Uniforme" = 'unif',
"Poisson" = 'pois',
"Gamma" = 'gamma')
),
selected = 'norm'),
actionButton('mostrar', label = 'Mostrar la distribucion')
),
mainPanel(
plotOutput("hist")
)
)
runApp('isolate.R')
runApp('isolate.R')
runApp('isolate.R')
runApp('renderui.R')
runApp('renderui.R')
runApp('renderui.R')
runApp('renderui.R')
{}
{5}
3
{
5
3
}
miFuncion <- function(x) {
x * 2
}
miFuncion(8)
x + 2
miFuncion <- function(x) {
x + 2
x * 2
}
miFuncion(8)
'Hola'
if (2==2){
'Hola'
}
x <- 2
print(x * 2)
x <- 1
if (2==2)
x <- 2
print(x * 2)
x <- 1
if (2==2)
x <- 2
print(x * 2)
x <- 1
if (2==3)
x <- 2
print(x * 2)
if (2==3){
x <- 2
print(x * 2)
}
x <- 1
if (2==3){
x <- 2
print(x * 2)
}
if (TRUE) 5 else if 7
if (2==2) 5 else if 7
if (2==2) 5 else if (2==3) 7
x <- if (2==2) 5 else if (2==3) 7
x
runApp('renderui.R')
runApp('renderui.R')
runApp('renderui.R')
runApp('renderui.R')
runApp('renderui.R')
runApp('renderui.R')
runApp('renderui.R')
runApp('renderui.R')
runApp('renderui.R')
?gamma
?rgamma
runApp('renderui.R')
?rpois
runApp('renderui.R')
runApp('renderui.R')
runApp('renderui.R')
runApp('renderui.R')
runApp('renderui.R')
